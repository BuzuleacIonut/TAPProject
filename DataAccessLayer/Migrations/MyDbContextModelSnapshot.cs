// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.TestModel", b =>
                {
                    //b.Property<Guid>("Id")
                    //  .ValueGeneratedOnAdd()
                    // .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    // b.HasKey("Id");

                    b.ToTable("TestModels");
                });
            modelBuilder.Entity("DataAccessLayer.Models.Admin", b =>
            {
                b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                b.HasKey("Id");

                b.ToTable("Admin");

            });
            modelBuilder.Entity("DataAccessLayer.Models.Book", b =>
            {
                b.Property<Guid>("Id")
                         .ValueGeneratedOnAdd()
                         .HasColumnType("uniqueidentifier");

                b.Property<string>("Title")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<string>("Author")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<string>("Genre")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("Return_Date")
                .HasColumnType("date");

                b.HasKey("Id");
                b.ToTable("Book");

            });
            modelBuilder.Entity("DataAccessLayer.Models.Books", b =>
            {
                b.Property<Guid>("Id")
                         .ValueGeneratedOnAdd()
                         .HasColumnType("uniqueidentifier");

                b.Property<string>("Title")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<string>("Author")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<Boolean>("Reservation_System")
                .IsRequired()
                .HasColumnType("bit");

                b.Property<string>("Genre")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<int>("Quantity")
                .IsRequired()
                .HasColumnType("int");

                b.Property<int>("AvailableQuantity")
                .IsRequired()
                .HasColumnType("int");

                b.Property<string>("Description")
                .HasColumnType("nvarchar(max)");

                b.HasKey("Id");
                b.ToTable("Books");


            });
            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
            {
                b.Property<string>("Password")
                .IsRequired()
                .HasColumnType("nvarchar(max)");


                b.Property<Guid>("Id")
                 .ValueGeneratedOnAdd()
                         .HasColumnType("uniqueidentifier");
                b.Property<string>("Email")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

                b.HasKey("Id");
                b.ToTable("User");

            });
            ///////////////////////////////////////////////////////////////////



            //////////////////////////////////////////////////////////////////
            modelBuilder.Entity("DataLayer.Models.Book", b =>
            {
                b.HasOne("DataLayer.Models.Books", "Books")
                    .WithMany("BooksBook")
                    .HasForeignKey("Id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Books");
            });
            modelBuilder.Entity("DataLayer.Models.User", b =>
            {
                b.HasOne("DataLayer.Models.Admin", "AllUsers")
                    .WithMany()
                    .HasForeignKey("Id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("User");
            });
            modelBuilder.Entity("DataLayer.Models.Book", b =>
            {
                b.HasOne("DataLayer.Models.Admin", "AllBook")
                    .WithMany()
                    .HasForeignKey("Id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Book");
            });

            modelBuilder.Entity("DataLayer.Models.Books", b =>
            {
                b.HasOne("DataLayer.Models.Admin", "AllBooks")
                    .WithMany()
                    .HasForeignKey("Id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("Books");
            });
            //BorrowedBook
            modelBuilder.Entity("DataLayer.Models.User", b =>
            {
                b.HasOne("DataLayer.Models.Admin", "BorrowedBook")
                    .WithMany()
                    .HasForeignKey("Id")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("User");
            });
#pragma warning restore 612, 618
        }
    }
}
